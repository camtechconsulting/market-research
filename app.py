
from flask import Flask, request, jsonify
from flask_cors import CORS
from docx import Document
from datetime import datetime
from docx.shared import Inches
import openai
import os
import fitz  # for PDF
from PIL import Image
import io
import re

app = Flask(__name__)
CORS(app)

openai.api_key = os.getenv("OPENAI_API_KEY")

REPORT_FOLDER = os.path.join(app.root_path, 'static', 'reports')
LOGO_PATH = os.path.join(app.root_path, 'static', 'logo.png')
os.makedirs(REPORT_FOLDER, exist_ok=True)

def extract_text_docx(file):
    doc = Document(file)
    return "\n".join([para.text for para in doc.paragraphs if para.text.strip()])

def extract_text_pdf(file):
    pdf = fitz.open(stream=file.read(), filetype="pdf")
    return "\n".join([page.get_text() for page in pdf])

def extract_text_image(file):
    image = Image.open(io.BytesIO(file.read()))
    return f"[Image Uploaded: {image.format}, {image.size}]"

def extract_text(file_storage):
    filename = file_storage.filename.lower()
    if filename.endswith(".pdf"):
        return extract_text_pdf(file_storage)
    elif filename.endswith(".docx") or filename.endswith(".doc"):
        return extract_text_docx(file_storage)
    elif filename.endswith((".png", ".jpg", ".jpeg")):
        return extract_text_image(file_storage)
    else:
        return ""

def clean_markdown(text):
    text = re.sub(r'^#+\s*', '', text, flags=re.MULTILINE)
    text = text.replace('*', '')
    return text.strip()

def extract_table_data(text):
    table = []
    lines = text.strip().splitlines()
    for line in lines:
        if '|' in line:
            row = [cell.strip() for cell in line.split('|') if cell.strip()]
            if row:
                table.append(row)
    return table if len(table) >= 2 else None

def generate_section(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-0125-preview",
            messages=[
                {"role": "system", "content": "You are a business consultant generating a professional market research report for a new business."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print("OpenAI API error:", e)
        return "Error generating this section."

def add_logo(doc):
    section = doc.sections[0]
    section.different_first_page_header_footer = True
    header = section.header
    paragraph = header.paragraphs[0]
    run = paragraph.add_run()
    if os.path.exists(LOGO_PATH):
        run.add_picture(LOGO_PATH, width=Inches(1.73), height=Inches(0.83))
        paragraph.alignment = 1

@app.route('/')
def home():
    return "Market Research Backend is Running!"

@app.route('/generate', methods=['POST'])
def generate_report():
    doc1 = request.files.get('doc1')
    doc2 = request.files.get('doc2')
    doc3 = request.files.get('doc3')

    context = ""
    if doc1: context += extract_text(doc1)
    if doc2: context += "\n" + extract_text(doc2)
    if doc3: context += "\n" + extract_text(doc3)

    if not context.strip():
        return jsonify({'error': 'No valid input provided.'}), 400

    doc = Document()
    add_logo(doc)
    doc.add_heading('Market Research Report', 0)
    doc.add_paragraph(f"Generated by CamTech Consulting on {datetime.now().strftime('%B %d, %Y')}")

    sections = [
        ("Industry Overview", "Provide a brief overview of the industry this business belongs to."),
        ("Market Trends & Insights", "Identify key trends, technologies, or customer behaviors influencing the market."),
        ("Target Market Analysis", "Define the target audience, demographics, behaviors, and pain points."),
        ("Competitive Landscape", "List key competitors and analyze their strategies, strengths, and weaknesses."),
        ("Market Entry Strategy", "Suggest how the business should position itself to enter the market."),
        ("Revenue Opportunity", "Estimate potential revenue models and outline pricing strategy."),
        ("Marketing Channels", "Identify best marketing channels and promotional tactics for this business.")
    ]

    for title, instruction in sections:
        doc.add_heading(title, level=1)
        prompt = f"{instruction}\n\nContext:\n{context}"
        response = generate_section(prompt)
        table_data = extract_table_data(response)
        if table_data:
            table = doc.add_table(rows=1, cols=len(table_data[0]))
            table.style = 'Table Grid'
            hdr_cells = table.rows[0].cells
            for i, val in enumerate(table_data[0]):
                hdr_cells[i].text = val
            for row_data in table_data[1:]:
                row_cells = table.add_row().cells
                for i, val in enumerate(row_data):
                    if i < len(row_cells):
                        row_cells[i].text = val
        else:
            doc.add_paragraph(clean_markdown(response))

    filename = f"market_research_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"
    filepath = os.path.join(REPORT_FOLDER, filename)
    doc.save(filepath)

    return jsonify({'download_url': f'/static/reports/{filename}'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
